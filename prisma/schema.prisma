// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model School {
    id        String   @id @default(cuid())
    name      String
    location  String
    joinCode  String   @unique
    createdAt DateTime @default(now())

    owner        User                @relation("SchoolOwner", fields: [ownerId], references: [id])
    ownerId      String              @unique
    counselors   User[]              @relation("SchoolCounselors")
    students     User[]              @relation("SchoolStudents")
    jobApprovals SchoolJobApproval[]
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]

    // Profile fields
    userType         String? // "STUDENT" | "COUNSELOR" | "COMPANY"
    bio              String?
    schoolCode       String? // For counselors to set their school code
    school           String? // For students to indicate their school
    position         String? // Job title or position
    // company          String? // Company name for company users
    location         String? // Location
    skills           String? // Comma-separated list of skills
    experience       String? // Years of experience
    education        String? // Education details
    profileCompleted Boolean @default(false)

    // School relations
    ownedSchool School?  @relation("SchoolOwner")
    counselorAt School[] @relation("SchoolCounselors")
    studentAt   School[] @relation("SchoolStudents")

    // New fields for company
    company Company?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model JobPost {
    id              String              @id @default(cuid())
    name            String
    shortDesc       String
    longDesc        String
    email           String?
    phone           String?
    website         String?
    applicationUrl  String
    createdAt       DateTime            @default(now())
    updatedAt       DateTime            @updatedAt
    approvalStatus  String              @default("PENDING")
    denialReason    String?
    company         Company             @relation(fields: [companyId], references: [id])
    companyId       String
    schoolApprovals SchoolJobApproval[]
}

model SchoolJobApproval {
    id           String   @id @default(cuid())
    jobPost      JobPost  @relation(fields: [jobPostId], references: [id])
    jobPostId    String
    school       School   @relation(fields: [schoolId], references: [id])
    schoolId     String
    status       String   @default("PENDING")
    denialReason String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@unique([jobPostId, schoolId])
}

model Company {
    id          String    @id @default(cuid())
    name        String
    description String?
    logo        String?   @default("/defaulticon.jpg")
    website     String?
    location    String?
    industry    String?
    size        String? // e.g. "1-10", "11-50", etc.
    founded     Int? // Year founded
    user        User      @relation(fields: [userId], references: [id])
    userId      String    @unique
    jobPosts    JobPost[]
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}
